

BASES DE DATOS:
    TABLAS:
        -- Generated by the database client.
        CREATE TABLE brands(
            id SERIAL NOT NULL,
            name varchar(255) NOT NULL,
            created_at timestamp with time zone NOT NULL,
            updated_at timestamp with time zone NOT NULL,
            deleted_at timestamp with time zone,
            PRIMARY KEY(id)
        );

        -- Generated by the database client.
        CREATE TABLE inventories(
            id SERIAL NOT NULL,
            product_id integer NOT NULL,
            quantity integer DEFAULT 0,
            created_at timestamp with time zone NOT NULL,
            updated_at timestamp with time zone NOT NULL,
            deleted_at timestamp with time zone,
            PRIMARY KEY(id)
        );

        -- Generated by the database client.
        CREATE TABLE logs(
            id SERIAL NOT NULL,
            "action" varchar(255) NOT NULL,
            catalog varchar(255) NOT NULL,
            created_at timestamp with time zone NOT NULL,
            updated_at timestamp with time zone NOT NULL,
            deleted_at timestamp with time zone,
            user_id integer,
            detail_last jsonb,
            detail_new jsonb
            -- CONSTRAINT logs_user_id_fkey FOREIGN key(user_id) REFERENCES users(id)
        );

        -- Generated by the database client.
        CREATE TABLE product_sales(
            id SERIAL NOT NULL,
            product_id integer NOT NULL,
            quantity integer NOT NULL,
            total_amount integer NOT NULL,
            created_at timestamp with time zone NOT NULL,
            updated_at timestamp with time zone NOT NULL,
            deleted_at timestamp with time zone,
            PRIMARY KEY(id)
        );

        -- Generated by the database client.
        CREATE TABLE products(
            id SERIAL NOT NULL,
            name varchar(255) NOT NULL,
            "key" varchar(255) NOT NULL,
            price double precision DEFAULT 0,
            reorder_point integer DEFAULT 0,
            brand_id integer,
            supplier_id integer NOT NULL,
            created_at timestamp with time zone NOT NULL,
            updated_at timestamp with time zone NOT NULL,
            deleted_at timestamp with time zone,
            PRIMARY KEY(id)
            -- CONSTRAINT fk_brand_id FOREIGN key(brand_id) REFERENCES brands(id)
        );
        CREATE INDEX idx_products_brand_id ON "products" USING btree ("brand_id");

        -- Generated by the database client.
        CREATE TABLE suppliers(
            id SERIAL NOT NULL,
            name varchar(255) NOT NULL,
            created_at timestamp with time zone NOT NULL,
            updated_at timestamp with time zone NOT NULL,
            deleted_at timestamp with time zone,
            PRIMARY KEY(id)
        );

        -- Generated by the database client.
        CREATE TABLE users(
            id SERIAL NOT NULL,
            name varchar(255) NOT NULL,
            last_name varchar(255) NOT NULL,
            second_surname varchar(255) NOT NULL,
            email varchar(255) NOT NULL,
            password varchar(255) NOT NULL,
            created_at timestamp without time zone NOT NULL DEFAULT now(),
            updated_at timestamp without time zone NOT NULL DEFAULT now(),
            deleted_at timestamp without time zone,
            PRIMARY KEY(id)
        );

    VISTAS:
        CREATE VIEW view_users AS
        SELECT * FROM users where deleted_at is null;

        CREATE VIEW view_brands AS
        SELECT * FROM brands where deleted_at is null;

        CREATE VIEW view_products AS
        SELECT
            prds.id,
            prds.name,
            prds.key,
            prds.price,
            prds.reorder_point,
            prds.brand_id AS brand_id,
            (SELECT name FROM brands WHERE id=prds.brand_id ) AS brand_name,
            prds.supplier_id,
            (SELECT name FROM suppliers WHERE id=prds.supplier_id ) AS supplier_name,
            prds.created_at,
            prds.updated_at
        FROM products prds
        WHERE prds.deleted_at is null;

        CREATE VIEW view_inventory_resume AS
        SELECT product_id, (
                SELECT SUM(quantity) total_quantity
                FROM inventories WHERE deleted_at IS NULL AND product_id = rp.product_id
            ) total_quantity,
            quantity_sold,
            total_amount
        FROM(
            SELECT product_id,sum(quantity) quantity_sold,sum(total_amount) total_amount
            FROM product_sales GROUP BY product_id
        ) AS rp;


        CREATE VIEW view_products_with_inventory AS
        SELECT
            vp.id AS product_id,
            vp.supplier_id,
            vp.supplier_name,
            vp.name product_name,
            vp.key product_key,
            vp.brand_id,
            vp.brand_name,
            vp.price product_price,
            vp.reorder_point product_reorder_point,
            vir. total_quantity,
            vir.quantity_sold,
            (vir.total_quantity  - vir.quantity_sold) AS quantity_available,
            COALESCE(vir.total_amount, 0) AS total_amount
        FROM view_products vp
        INNER JOIN view_inventory_resume vir ON vp.id=vir.product_id;



        CREATE VIEW view_logs  AS
        SELECT
            lv.id id,
            lv.action,
            lv.catalog,
            lv.detail_last,
            lv.detail_new,
            u.id user_id,
            u.name user_name,
            u.last_name user_last_name,
            u.email user_email,
            lv.created_at,
            lv.updated_at
        FROM logs lv
        JOIN users u ON lv.user_id = u.id
        WHERE lv.deleted_at is null
        Order by lv.id desc;

        CREATE VIEW view_brands_with_products AS
        SELECT * FROM view_brands vb WHERE EXISTS ( SELECT 1 FROM products WHERE vb.id = products.brand_id);

        CREATE VIEW view_inventories AS
        SELECT 
            iv.id,
            vp.supplier_id,
            (SELECT name FROM suppliers WHERE id=vp.supplier_id) AS supplier_name,
            iv.product_id,
            vp.name,
            vp.key,
            vp.brand_name,
            iv.quantity,
            vp.price,
            vp.reorder_point,
            iv.created_at,
            iv.updated_at
        FROM inventories iv    
            INNER JOIN view_products vp ON iv.product_id=vp.id
        WHERE iv.deleted_at is null;

        CREATE VIEW view_product_sales AS
        SELECT 
            ps.id,
            ps.product_id,
            vp.name,
            vp.key,
            vp.brand_name,
            ps.quantity AS quantity_sold,
            ps.total_amount,
            ps.created_at,
            ps.updated_at
        FROM product_sales ps  
            INNER JOIN view_products vp ON ps.product_id=vp.id
        WHERE ps.deleted_at is null;

        CREATE VIEW view_suppliers AS
        SELECT * FROM suppliers where deleted_at is null;


    FUNCIONES/PROCEDIMIENTOS:
        CREATE OR REPLACE FUNCTION public.create_log(p_user_id integer, p_action character varying, p_catalog character varying, p_detail_last jsonb, p_detail_new jsonb)
        RETURNS void
        LANGUAGE plpgsql
        AS $function$
        BEGIN
            INSERT INTO logs (user_id, action, catalog, detail_last, detail_new, created_at,updated_at)
            VALUES (p_user_id, p_action, p_catalog, p_detail_last, p_detail_new, NOW(),NOW());
        END;
        $function$

    CONSULTAS:
        -- Estadisticas de los producvtos vendidos de cada proveedor
        SELECT 
            vs.id,
            vs.name,
            vp.num_products,
            vp.quantity_sold,
            vp.total_quantity,
            vp.quantity_available
        FROM view_suppliers vs
        LEFT JOIN(
            SELECT 
                supplier_id,
                COUNT(*) num_products,
                SUM(quantity_sold) quantity_sold,
                SUM(total_quantity) total_quantity,
                SUM(quantity_available) quantity_available
            FROM  view_products_with_inventory 
            GROUP BY supplier_id
        ) vp ON vs.id=vp.supplier_id;
    * COMANDOS PARA RECORDAR
        TRUNCATE products;
        SELECT setval('products_id_seq', 1, false);

        DELETE FROM brands;
        SELECT setval('brands_id_seq', 1, false);

        DELETE FROM logs;
        SELECT setval('logs_id_seq', 1, false);
        SELECT * FROM pg_views where Schemaname='public';
        select pg_get_viewdef('view_all_logs', true);
        SELECT nextval('products_id_seq') AS proximo_id;


































































MYSQL:
-- Tabla de marcas
CREATE TABLE brands (
    id INT AUTO_INCREMENT NOT NULL,
    name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    deleted_at TIMESTAMP,
    PRIMARY KEY (id)
);
-- Tabla de productos
CREATE TABLE products (
    id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    name VARCHAR(255) NOT NULL,
    `key` VARCHAR(255) NOT NULL,
    brand_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP,
    FOREIGN KEY (brand_id) REFERENCES brands (id)
);

-- Tabla de proveedores
CREATE TABLE suppliers (
    id INT AUTO_INCREMENT NOT NULL,
    name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    deleted_at TIMESTAMP,
    PRIMARY KEY (id)
);

-- Tabla de usuarios
CREATE TABLE users (
    id INT AUTO_INCREMENT NOT NULL,
    name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    second_surname VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP,
    PRIMARY KEY (id)
);


-- Tabla de inventarios
CREATE TABLE inventories (
    id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    product_id INT NOT NULL,
    supplier_id INT NOT NULL,
    quantity INT DEFAULT 0,
    reorder_point INT DEFAULT 0,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    deleted_at TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(id),
    FOREIGN KEY (supplier_id) REFERENCES suppliers(id)
);

-- Tabla de logs
CREATE TABLE logs (
    id INT  PRIMARY KEY AUTO_INCREMENT NOT NULL,
    action VARCHAR(255) NOT NULL,
    catalog VARCHAR(255) NOT NULL,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    deleted_at TIMESTAMP,
    user_id INT,
    detail_last VARCHAR(255)  NULL,
    detail_new VARCHAR(255)  NULL,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Tabla de ventas de productos
CREATE TABLE product_sales (
    id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    total_amount INT NOT NULL,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    deleted_at TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(id)
);


